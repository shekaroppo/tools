#!/usr/bin/env python

import argparse
import os
import sqlite3
import sys
import parser
import requests
import re
import datetime
import dateutil
import threading
import collections
from prettytable import PrettyTable

GOOGLE_DRIVE = os.getenv("GOOGLE_DRIVE")
DB = "%s/ramesh/financials/mydata.db" % GOOGLE_DRIVE
CONN = sqlite3.connect(DB)
CURSOR = CONN.cursor()


def get_table(*fields):
    pretty_table = PrettyTable(list(fields))
    empty_row = [""] * len(fields)
    return pretty_table, empty_row


def show_mutual_fund(parsed_args):
    fields = ["id", "folio", "name", "nav"]
    if parsed_args.url:
        fields.append("url")
    table, empty_row = get_table(*fields)
    for row in CURSOR.execute("select %s from mutual_fund" % ",".join(fields)):
        table.add_row(list(row))
    print table


def show_mutual_fund_purchase(parsed_args):
    table, empty_row = get_table(
        "Index", "Name", "Amount", "Time", "Units", "Purchase NAV")
    for idx, row in enumerate(CURSOR.execute(
            "select mutual_fund.name, amount, time, units, mutual_fund_purchase.nav "
            "from mutual_fund_purchase join mutual_fund "
            "where mutual_fund_purchase.id=mutual_fund.id order by time")):
        table.add_row([idx + 1] + list(row))
    print table


def show_mutual_fund_status(parsed_args):
    table, empty_row = get_table(
        "Index",
        "Name",
        "Ltst NAV",
        "Avg Days",
        "Amount",
        "Units",
        "Crnt val",
        "Appr",
        "Pj Yrly Ret",
    )
    rows = []
    sort_field = {"appr": 6, "amt": 5, "name": 0}
    field = parsed_args.sort
    if not parsed_args.date:
        date = str(datetime.date.today())
        date_obj = datetime.date.today()
    else:
        date = parsed_args.date
        date_obj = datetime.datetime.strptime(date, "%Y-%m-%d").date()
    total_amount_invested = 0
    total_weighted_sum_x_average = 0
    total_current_value = 0
    purchases = collections.defaultdict(list)
    for row in CURSOR.execute(
        "select distinct mutual_fund.name, nav.nav, mutual_fund_purchase.amount, mutual_fund_purchase.units, mutual_fund_purchase.time from "
        "mutual_fund_purchase join mutual_fund join nav "
            "where mutual_fund_purchase.id=mutual_fund.id and nav.mutual_fund_id=mutual_fund.id and date(nav.date)=\"%s\"" % date):
        date_delta = (date_obj -
                      datetime.datetime.strptime(row[4], "%Y-%m-%d").date()).days
        purchases[row[0]].append({
            'nav': row[1],
            'amount': row[2],
            'units': row[3],
            'delta': date_delta})

    for name, info in purchases.items():
        weighted_sum_x_average = sum([x['amount'] * x['delta'] for x in info])
        amount_invested = sum([x['amount'] for x in info])
        total_units = sum([x['units'] for x in info])
        weighted_average = weighted_sum_x_average / amount_invested
        total_amount_invested += amount_invested
        total_weighted_sum_x_average += weighted_sum_x_average
        current_value = int(total_units * info[0]['nav'])
        total_current_value += current_value
        appreciation = round(
            ((current_value - amount_invested) * 100.0) / amount_invested, 2)
        yearly_return = (round((1.0 + (appreciation / 100.0))
                               ** (365.0 / weighted_average), 4) - 1.0) * 100
        rows.append([name, info[0]['nav'], weighted_average, amount_invested,
                     total_units, current_value, appreciation, yearly_return])

    for idx, row in enumerate(sorted(rows, key=lambda x: x[sort_field[field]])):
        table.add_row([idx + 1] + row)
    table.add_row(empty_row)
    total_weighted_average_days = total_weighted_sum_x_average / total_amount_invested
    total_appreciation = round(
        ((total_current_value - total_amount_invested) * 100.0) / total_amount_invested, 2)
    yearly_return = (round((1.0 + (total_appreciation / 100.0))
                           ** (365.0 / total_weighted_average_days), 4) - 1.0) * 100
    table.add_row(["", "Total", "",
                   total_weighted_average_days,
                   total_amount_invested, "", total_current_value,
                   total_appreciation, yearly_return])
    print table


def update_latest_nav(parsed_args):
    queries = []
    date_str = str(datetime.date.today())
    queries.append(
        ("Deleting current NAV for date %s" % date_str,
         ["delete from nav where date(date)='%s'" % date_str]))

    def fetch_url(row):
        rsp = requests.get(row[2])
        m = re.search(r'class="bd30tp">(\d+\.\d+)</span>', rsp.text)
        assert m
        latest_nav = m.group(1)
        helper_str = "Setting NAV=%s for %s" % (latest_nav, row[1])
        query1 = "update mutual_fund set nav=%s where id=%s" % (
            latest_nav, row[0])
        query2 = ("insert into nav(mutual_fund_id, date, nav) "
                  "values(%s, CURRENT_TIMESTAMP, %s)" %
                  (row[0], latest_nav))
        queries.append((helper_str, [query1, query2]))

    threads = [threading.Thread(target=fetch_url, args=(row,))
               for row in CURSOR.execute("select id, name, url from mutual_fund")]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()

    for query in queries:
        print query[0]
        for q in query[1]:
            CURSOR.execute(q)
    CONN.commit()


def insert_mf_purchase(parsed_args):
    units = round(parsed_args.amount / parsed_args.nav, 3)
    query = (
        "insert into mutual_fund_purchase(id, units, nav, amount, time) "
        "values(%s, %s, %s, %s, \"%s\")" %
        (parsed_args.id, units, parsed_args.nav,
         parsed_args.amount, parsed_args.date))
    CURSOR.execute(query)
    CONN.commit()


def insert_fixed_deposit(parsed_args):
    query = (
        "insert into fixed_deposit(name, amount, rate, tenure, deposit_date, maturity_date, maturity_amount) "
        "values(\"%s\", %s, %s, %s, \"%s\", \"%s\", %s)" %
        (parsed_args.name, parsed_args.amount, parsed_args.rate,
         parsed_args.tenure, parsed_args.deposit_date,
         parsed_args.maturity_date, parsed_args.maturity_amount))
    CURSOR.execute(query)
    CONN.commit()


def show_fixed_deposit_sort_fields():
    sort_field = {"amt": 3, "name": 2, "rate": 4, "date": 7}
    return sort_field


def show_fixed_deposit(parsed_args):
    table, empty_row = get_table("Id", "Internal Id", "Name",
                                 "Amount", "Rate", "Tenure",
                                 "Deposit Date", "Maturity Date",
                                 "Maturity Amount")
    sort_field = show_fixed_deposit_sort_fields()
    field = parsed_args.sort
    fds = []
    for row in CURSOR.execute("select * from fixed_deposit"):
        fd_info = list(row)
        fds.append(fd_info)

    for idx, fd in enumerate(sorted(fds, key=lambda x: x[sort_field[field]])):
        table.add_row([idx + 1] + fd)
    print table


def show_nav(parsed_args):
    table, empty_row = get_table("Index", "Date")
    for idx, row in enumerate(CURSOR.execute(
            "select date(date) from nav group by date(date);")):
        table.add_row([idx + 1] + list(row))
    print table


FUNCTION_MAP = {
    'smf': show_mutual_fund,
    'smfp': show_mutual_fund_purchase,
    'smfs': show_mutual_fund_status,
    'uln': update_latest_nav,
    'imfp': insert_mf_purchase,
    'ifd': insert_fixed_deposit,
    'sfd': show_fixed_deposit,
    'snav': show_nav,
}


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='subcommands')

    smf = subparsers.add_parser('smf')
    smf.set_defaults(subcommand='smf')
    smf.add_argument("--url", action='store_true')

    smfp = subparsers.add_parser('smfp')
    smfp.set_defaults(subcommand='smfp')

    smfs = subparsers.add_parser('smfs')
    smfs.set_defaults(subcommand='smfs')
    smfs.add_argument('date', nargs="?", type=str)
    smfs.add_argument(
        '--sort', choices=["appr", "amt", "name"], default="appr")

    imfp = subparsers.add_parser('imfp')
    imfp.set_defaults(subcommand='imfp')
    imfp.add_argument('id', type=int)
    imfp.add_argument('nav', type=float)
    imfp.add_argument('amount', type=int)
    imfp.add_argument('date', type=str)

    uln = subparsers.add_parser('uln')
    uln.set_defaults(subcommand='uln')

    ifd = subparsers.add_parser('ifd')
    ifd.set_defaults(subcommand='ifd')
    ifd.add_argument('name', type=str)
    ifd.add_argument('amount', type=int)
    ifd.add_argument('rate', type=float)
    ifd.add_argument('tenure', type=int)
    ifd.add_argument('deposit_date', type=str)
    ifd.add_argument('maturity_date', type=str)
    ifd.add_argument('maturity_amount', type=str)

    snav = subparsers.add_parser('snav')
    snav.set_defaults(subcommand='snav')

    sfd = subparsers.add_parser('sfd')
    sfd.set_defaults(subcommand='sfd')
    sfd.add_argument('--sort', choices=show_fixed_deposit_sort_fields().keys(),
                     default="amt")

    parsed_args = parser.parse_args()
    FUNCTION_MAP[parsed_args.subcommand](parsed_args)
    CONN.close()

main()
